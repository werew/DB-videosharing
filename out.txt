SQL> @makedb

Table created.


Table created.


Table created.


Table created.


Table created.


Table created.


Table created.


Table created.


Table created.


Table created.


Table created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


Trigger created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.

SQL> @queries

***** Requete N. 1 ******************************************************
* Nombre de visionnages de vidéos par catégories de vidéos, pour les    *
* visionnages de moins de deux semaines.				*
*************************************************************************

Category							  Views
------------------------------------------------------------ ----------
Intertainement							      1
Science 							      2
Cinema								      1

***** Requete N. 2 ******************************************************
* Par utilisateur, le nombre d’abonnements, de favoris et de vidéos     *
* visionnées.                                                           *
*************************************************************************

      User Subscriptions Selections	 Views
---------- ------------- ---------- ----------
	 0	       0	  2	     2
	 1	       2	  0	     1
	 2	       1	  0	     4
	 3	       1	  1	     7
	 4	       0	  2	     0

***** Requete N. 3 ******************************************************
* Pour chaque vidéo, le nombre de visionnages par des utilisateurs      *
* français, le nombre de visionnage par des utilisateurs allemands, la  *
* différence entre les deux, triés par valeur absolue de la différence  *
* entre les deux.							*
*************************************************************************

   VIDEOID   Views FR	Views DE Difference
---------- ---------- ---------- ----------
	 4	    1	       1	  0
	 9	    0	       0	  0
	 8	    0	       0	  0
	 7	    0	       0	  0
	 0	    1	       0	  1
	 6	    0	       1	  1
	 3	    0	       1	  1
	 1	    0	       2	  2
	 2	    0	       3	  3
	 5	    0	       3	  3

10 rows selected.

***** Requete N. 4 ******************************************************
* Les épisodes d’émissions qui ont au moins deux fois plus de visionnage*
* que la moyenne des visionnages des autres épisodes de l’émission.     *
*************************************************************************

   VIDEOID
----------
	 2
	 4
	 0
	 5

***** Requete N. 5 ******************************************************
* Les 10 couples de vidéos apparaissant le plus souvent simultanément   *
* dans un historique de visionnage d’utilisateur.                       *
*************************************************************************

    VIDEO1     VIDEO2
---------- ----------
	 2	    5
	 0	    4
	 1	    2
	 1	    3
	 1	    5
	 1	    6
	 2	    3
	 2	    4
	 2	    6
	 3	    5

10 rows selected.

SQL> @proc-fun

******** Exercise 1 ******************************************
* Définir une fonction qui convertit au format json les      *
* informations d’une vidéo                                   *
**************************************************************

Function created.


JSON
--------------------------------------------------------------------------------
{ "videoid": 3, "name": "Life is Beautiful", "description": "A Jewish librarian
protecting his son during Holocaust", "length": 90, "country": "IT", "firstdiffu
sion": "", "format": "mp4", "multilang": true, "expiration": "31-JAN-16", "progr
amid": 1 }


******** Exercise 2 ******************************************
* Définir une procédure qui générera un texte initial de la  *
* newsletter en y ajoutant la liste de toutes les sorties de *
* la semaine informations d’une vidéo                        *
**************************************************************

Procedure created.

Hello, have you seen the new videos of this week ?
Chek it out!

Futurama - Episode - 4: We all love Zoidberg
Futurama - Episode - 3: Fry visits the moon

See you soon on www.fantasticvideos.com!

PL/SQL procedure successfully completed.

******** Exercise 3 ******************************************
* Définir une procédure qui génère N épisodes, un par semaine*
* , entre une date de début et une date de fin indiquées en  *
* paramètre de la procédure. L’incrémentation du numéro      *
* d’épisode partira du dernier épisode dans la base. Le      *
* descriptif de l’épisode sera « à venir ».                  *
**************************************************************

Procedure created.


PL/SQL procedure successfully completed.

******** Exercise 4 ******************************************
* Générer la liste des vidéos populaires, conseillées pour   *
* un utilisateur, c’est à dire fonction des catégories de    *
* vidéos qu’il suit.                                         *
**************************************************************

Procedure created.

Great personalities of the last century - Turing's life: A tour inside the life
of the father of the modern computer

PL/SQL procedure successfully completed.
